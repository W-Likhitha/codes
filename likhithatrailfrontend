Great! You're viewing the PatientDashboardComponent right now.
As requested, I'll now provide each file and component individually, starting from the top of your UI specification.
________________________________________
✅ 1. HeaderComponent
📄 header.component.ts
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [RouterModule, CommonModule],
  templateUrl: './header.component.html',
  styleUrl: './header.component.css'
})
export class HeaderComponent {
  isLoggedIn = !!localStorage.getItem('authToken');

  logout() {
    localStorage.removeItem('authToken');
    window.location.href = '/login';
  }
}
📄 header.component.html
<header class="header">
  <div class="logo">YHospitals</div>
  <nav class="nav-links">
    <a routerLink="/">Home</a>
    <a routerLink="/all-doctors">All Doctors</a>
    <a routerLink="/about">About</a>
    <a routerLink="/contact">Contact</a>
  </nav>
  <div class="auth-buttons">
    <button *ngIf="!isLoggedIn" routerLink="/login">Register / Login</button>
    <button *ngIf="isLoggedIn" (click)="logout()">Logout</button>
  </div>
</header>
📄 header.component.css
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #004080;
  color: white;
  padding: 10px 20px;
}

.logo {
  font-size: 22px;
  font-weight: bold;
}

.nav-links a {
  color: white;
  margin: 0 10px;
  text-decoration: none;
}

.auth-buttons button {
  background-color: white;
  color: #004080;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
}
________________________________________
✅ 2. HomeComponent
📄 home.component.ts
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [RouterModule, CommonModule],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HomeComponent {
  constructor() {}
}
📄 home.component.html
<div class="hero-section">
  <div class="text-box">
    <h1>Book Appointment with Trusted Doctors</h1>
    <p>Simply browse through our extensive list of trusted doctors, schedule your appointment hassle-free.</p>
    <button routerLink="/login">Book Appointment</button>
  </div>
</div>

<div class="doctors-showcase">
  <img src="assets/doctor1.jpg" alt="Doctor 1" class="doctor-pic" />
  <img src="assets/doctor2.jpg" alt="Doctor 2" class="doctor-pic" />
  <img src="assets/doctor3.jpg" alt="Doctor 3" class="doctor-pic" />
</div>
📄 home.component.css
.hero-section {
  background: url('assets/hospital-bg.jpg') no-repeat center center/cover;
  height: 80vh;
  display: flex;
  align-items: center;
  padding-left: 50px;
}

.text-box {
  color: white;
  max-width: 500px;
}

.text-box h1 {
  font-size: 2.5rem;
  margin-bottom: 20px;
}

.text-box button {
  background: #004080;
  color: white;
  padding: 10px 20px;
  border: none;
  font-size: 1rem;
  border-radius: 5px;
  cursor: pointer;
}

.doctors-showcase {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin: 30px 0;
}

.doctor-pic {
  border-radius: 50%;
  width: 100px;
  height: 100px;
}
________________________________________
I’ll continue delivering the next components in your requested blueprint:
•	✅ LoginComponent
•	✅ RegisterComponent
•	✅ AllDoctorsComponent
•	✅ BookAppointmentComponent
•	✅ DashboardDoctorComponent
•	✅ DashboardPatientComponent (already done)
Would you like me to continue now with the LoginComponent?
// Angular standalone version - Complete Frontend Code
// (Continued with PatientDashboardComponent)

// ---------------------- patient-dashboard.component.ts ----------------------
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-patient-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './patient-dashboard.component.html',
  styleUrl: './patient-dashboard.component.css'
})
export class PatientDashboardComponent implements OnInit {
  appointments: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.fetchAppointments();
  }

  fetchAppointments() {
    this.http.get<any[]>('http://localhost:8080/api/appointments/patient')
      .subscribe({
        next: (data) => this.appointments = data,
        error: (err) => console.error('Error fetching appointments', err)
      });
  }

  cancelAppointment(id: number) {
    if (confirm('Are you sure you want to cancel this appointment?')) {
      this.http.delete(`http://localhost:8080/api/appointments/${id}`)
        .subscribe({
          next: () => this.appointments = this.appointments.filter(a => a.id !== id),
          error: () => alert('Failed to cancel appointment')
        });
    }
  }

  updateAppointment(id: number) {
    // Navigate to update form page (placeholder)
    alert('Redirecting to update form for appointment ID: ' + id);
  }
}

// ---------------------- patient-dashboard.component.html ----------------------
<div class="dashboard-container">
  <h2>Patient Dashboard</h2>
  <div *ngIf="appointments.length === 0">No appointments found.</div>
  <div class="appointment-card" *ngFor="let appt of appointments">
    <h4>Doctor: {{ appt.doctorName }}</h4>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>
    <button (click)="updateAppointment(appt.id)">Update</button>
    <button (click)="cancelAppointment(appt.id)" class="cancel">Cancel</button>
  </div>
</div>

// ---------------------- patient-dashboard.component.css ----------------------
.dashboard-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.dashboard-container h2 {
  text-align: center;
  margin-bottom: 20px;
}

.appointment-card {
  padding: 15px;
  border-radius: 8px;
  border: 1px solid #ccc;
  background: #fdfdfd;
  margin-bottom: 15px;
}

.appointment-card button {
  background-color: #007bff;
  color: white;
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 8px;
  margin-right: 8px;
}

.appointment-card button.cancel {
  background-color: #dc3545;
}

.appointment-card button:hover {
  opacity: 0.9;
}

// ✅ PatientDashboardComponent is now complete.
// Let me know if you want to implement update forms or secure routes next!
Here is your complete implementation for the ✅ RegisterComponent in Angular standalone format:
________________________________________
📄 register.component.ts
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, HttpClientModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
  user = {
    email: '',
    password: '',
    username: '',
    gender: '',
    phone: '',
    role: '',
    specialization: '',
    qualification: '',
    place: ''
  };

  constructor(private http: HttpClient, private router: Router) {}

  register() {
    if (!this.user.email || !this.user.password || !this.user.username || !this.user.gender || !this.user.phone || !this.user.role) {
      alert('Please fill all required fields.');
      return;
    }

    if (this.user.role === 'Doctor' && (!this.user.specialization || !this.user.qualification)) {
      alert('Doctor details are required.');
      return;
    }

    if (this.user.role === 'Patient' && !this.user.place) {
      alert('Place is required for patients.');
      return;
    }

    this.http.post('http://localhost:8080/api/auth/register', this.user).subscribe({
      next: () => {
        alert('Registration successful');
        this.router.navigate(['/login']);
      },
      error: () => alert('Registration failed')
    });
  }
}
________________________________________
📄 register.component.html
<div class="auth-container">
  <header>
    <div class="logo">YHospitals</div>
    <div class="switch-link">Already have an account? <a routerLink="/login">Sign In</a></div>
  </header>

  <main>
    <h2>Sign Up for YHospitals</h2>
    <form (ngSubmit)="register()">
      <input [(ngModel)]="user.email" name="email" placeholder="Email" required>
      <input [(ngModel)]="user.password" name="password" placeholder="Password" required type="password">
      <input [(ngModel)]="user.username" name="username" placeholder="Username" required>
      <input [(ngModel)]="user.gender" name="gender" placeholder="Gender" required>
      <input [(ngModel)]="user.phone" name="phone" placeholder="Phone Number" required>

      <label>Role</label>
      <select [(ngModel)]="user.role" name="role" required>
        <option value="">Select Role</option>
        <option value="Doctor">Doctor</option>
        <option value="Patient">Patient</option>
      </select>

      <div *ngIf="user.role === 'Doctor'">
        <input [(ngModel)]="user.specialization" name="specialization" placeholder="Specialization" required>
        <input [(ngModel)]="user.qualification" name="qualification" placeholder="Qualification" required>
      </div>

      <div *ngIf="user.role === 'Patient'">
        <input [(ngModel)]="user.place" name="place" placeholder="Place" required>
      </div>

      <button type="submit">Submit</button>
    </form>
  </main>
</div>
________________________________________
📄 register.component.css
.auth-container {
  max-width: 400px;
  margin: 60px auto;
  border: 1px solid #ccc;
  padding: 20px;
  border-radius: 8px;
  background: white;
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

header .logo {
  font-weight: bold;
  font-size: 1.2rem;
}

.switch-link a {
  color: #007bff;
  text-decoration: none;
}

form {
  display: flex;
  flex-direction: column;
}

input, select {
  padding: 10px;
  margin-bottom: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button[type="submit"] {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
}
________________________________________
✅ RegisterComponent is now fully implemented with conditional inputs for both Doctor and Patient.
🔜 Coming up next:
•	AllDoctorsComponent
•	BookAppointmentComponent (already built)
•	DoctorDashboardComponent (already built)
•	PatientDashboardComponent (already built)
Would you like me to proceed with AllDoctorsComponent now?
// Angular standalone version - Complete Frontend Code
// (Continued with PatientDashboardComponent)

// ---------------------- patient-dashboard.component.ts ----------------------
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-patient-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './patient-dashboard.component.html',
  styleUrl: './patient-dashboard.component.css'
})
export class PatientDashboardComponent implements OnInit {
  appointments: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.fetchAppointments();
  }

  fetchAppointments() {
    this.http.get<any[]>('http://localhost:8080/api/appointments/patient')
      .subscribe({
        next: (data) => this.appointments = data,
        error: (err) => console.error('Error fetching appointments', err)
      });
  }

  cancelAppointment(id: number) {
    if (confirm('Are you sure you want to cancel this appointment?')) {
      this.http.delete(`http://localhost:8080/api/appointments/${id}`)
        .subscribe({
          next: () => this.appointments = this.appointments.filter(a => a.id !== id),
          error: () => alert('Failed to cancel appointment')
        });
    }
  }

  updateAppointment(id: number) {
    // Navigate to update form page (placeholder)
    alert('Redirecting to update form for appointment ID: ' + id);
  }
}

// ---------------------- patient-dashboard.component.html ----------------------
<div class="dashboard-container">
  <h2>Patient Dashboard</h2>
  <div *ngIf="appointments.length === 0">No appointments found.</div>
  <div class="appointment-card" *ngFor="let appt of appointments">
    <h4>Doctor: {{ appt.doctorName }}</h4>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>
    <button (click)="updateAppointment(appt.id)">Update</button>
    <button (click)="cancelAppointment(appt.id)" class="cancel">Cancel</button>
  </div>
</div>

// ---------------------- patient-dashboard.component.css ----------------------
.dashboard-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.dashboard-container h2 {
  text-align: center;
  margin-bottom: 20px;
}

.appointment-card {
  padding: 15px;
  border-radius: 8px;
  border: 1px solid #ccc;
  background: #fdfdfd;
  margin-bottom: 15px;
}

.appointment-card button {
  background-color: #007bff;
  color: white;
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 8px;
  margin-right: 8px;
}

.appointment-card button.cancel {
  background-color: #dc3545;
}

.appointment-card button:hover {
  opacity: 0.9;
}

// ✅ PatientDashboardComponent is now complete.
// Let me know if you want to implement update forms or secure routes next!
✅ AllDoctorsComponent is now fully implemented:
•	Displays list of doctors
•	Shows their name, specialization, and availability
•	Automatically fetches from your backend (/api/doctors)
________________________________________
Next Options:
Would you like me to proceed with:
1.	🗓️ BookAppointmentComponent (show dropdown for doctor/date/time)
2.	✅ Already implemented dashboards or services setup
3.	🛡️ Route protection with auth guard
4.	🌐 Final routing configuration in app.routes.ts
Let me know what you'd like next!
✅ BookAppointmentComponent is now implemented with:
•	Doctor dropdown list from backend
•	Date and time slot picker
•	Form submission via REST API
________________________________________
Since the canmore tool is temporarily disabled, I’ll now give you the remaining pieces directly here:
________________________________________
✅ app.routes.ts – Routing Setup
import { Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { AllDoctorsComponent } from './pages/all-doctors/all-doctors.component';
import { BookAppointmentComponent } from './pages/book-appointment/book-appointment.component';
import { LoginComponent } from './auth/login/login.component';
import { RegisterComponent } from './auth/register/register.component';
import { DoctorDashboardComponent } from './pages/dashboard-doctor/doctor-dashboard.component';
import { PatientDashboardComponent } from './pages/dashboard-patient/patient-dashboard.component';

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'all-doctors', component: AllDoctorsComponent },
  { path: 'book-appointment', component: BookAppointmentComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'dashboard-doctor', component: DoctorDashboardComponent },
  { path: 'dashboard-patient', component: PatientDashboardComponent },
];
________________________________________
✅ Auth Guard (Optional)
If you want to restrict access to certain routes:
📄 auth.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';

export const authGuard: CanActivateFn = () => {
  const router = inject(Router);
  const token = localStorage.getItem('authToken');
  if (!token) {
    router.navigate(['/login']);
    return false;
  }
  return true;
};
Then update app.routes.ts:
import { authGuard } from './auth.guard';

{ path: 'book-appointment', component: BookAppointmentComponent, canActivate: [authGuard] },
{ path: 'dashboard-doctor', component: DoctorDashboardComponent, canActivate: [authGuard] },
{ path: 'dashboard-patient', component: PatientDashboardComponent, canActivate: [authGuard] },
________________________________________
✅ Summary of Completed Files:
•	✅ HeaderComponent
•	✅ HomeComponent
•	✅ LoginComponent
•	✅ RegisterComponent
•	✅ AllDoctorsComponent
•	✅ BookAppointmentComponent
•	✅ PatientDashboardComponent
•	✅ Routing & Guard
Next up:
•	🩺 DoctorDashboardComponent for managing appointments, marking as completed/pending
•	🔧 Services (AuthService, AppointmentService, DoctorService)
Would you like me to proceed with the DoctorDashboardComponent implementation next?
Here is your complete ✅ DoctorDashboardComponent implementation, where doctors can:
•	View upcoming appointments
•	See patient details
•	Mark appointments as completed/pending
•	Update status as needed
________________________________________
📄 doctor-dashboard.component.ts
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-doctor-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './doctor-dashboard.component.html',
  styleUrl: './doctor-dashboard.component.css'
})
export class DoctorDashboardComponent implements OnInit {
  appointments: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.fetchAppointments();
  }

  fetchAppointments() {
    this.http.get<any[]>('http://localhost:8080/api/appointments/doctor')
      .subscribe({
        next: data => this.appointments = data,
        error: err => console.error('Error loading appointments', err)
      });
  }

  updateStatus(id: number, newStatus: string) {
    this.http.put(`http://localhost:8080/api/appointments/${id}/status`, { status: newStatus })
      .subscribe({
        next: () => {
          this.appointments = this.appointments.map(appt => {
            if (appt.id === id) appt.status = newStatus;
            return appt;
          });
        },
        error: () => alert('Status update failed')
      });
  }
}
________________________________________
📄 doctor-dashboard.component.html
<div class="dashboard-container">
  <h2>Doctor Dashboard</h2>
  <div *ngIf="appointments.length === 0">No appointments scheduled.</div>
  <div *ngFor="let appt of appointments" class="appointment-card">
    <h3>Patient: {{ appt.patientName }}</h3>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>

    <button *ngIf="appt.status !== 'Completed'" (click)="updateStatus(appt.id, 'Completed')">Mark as Completed</button>
    <button *ngIf="appt.status === 'Completed'" (click)="updateStatus(appt.id, 'Pending')">Mark as Pending</button>
  </div>
</div>
________________________________________
📄 doctor-dashboard.component.css
.dashboard-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.appointment-card {
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 15px;
  background: #f9f9f9;
  margin-bottom: 20px;
}

button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

button:hover {
  opacity: 0.9;
}
________________________________________
✅ DoctorDashboardComponent is now fully functional and cleanly styled.
Next up:
•	🧠 AuthService + AppointmentService + DoctorService Angular services
•	✅ Integration of auth token into service headers
•	⚙️ Optionally add patient consultation records (notes/prescriptions)
Would you like me to start with the services (e.g. AuthService) now?
Great! Let’s implement the essential Angular services for your Healthcare Appointment Management System frontend:
________________________________________
✅ 1. AuthService – for login, registration, and token handling
📄 auth.service.ts
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private TOKEN_KEY = 'authToken';

  constructor() {}

  saveToken(token: string) {
    localStorage.setItem(this.TOKEN_KEY, token);
  }

  getToken(): string | null {
    return localStorage.getItem(this.TOKEN_KEY);
  }

  getUserEmail(): string | null {
    const token = this.getToken();
    if (!token) return null;

    const payload = token.split('.')[1];
    try {
      const decoded = JSON.parse(atob(payload));
      return decoded.email || null;
    } catch {
      return null;
    }
  }

  logout() {
    localStorage.removeItem(this.TOKEN_KEY);
  }

  isLoggedIn(): boolean {
    return !!this.getToken();
  }
}
________________________________________
✅ 2. DoctorService – for fetching doctor list and availability
📄 doctor.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DoctorService {
  private baseUrl = 'http://localhost:8080/api/doctors';

  constructor(private http: HttpClient, private auth: AuthService) {}

  getAllDoctors(): Observable<any[]> {
    return this.http.get<any[]>(this.baseUrl);
  }

  getHeaders(): HttpHeaders {
    return new HttpHeaders({
      Authorization: `Bearer ${this.auth.getToken()}`
    });
  }

  getDoctorAppointments(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/appointments`, {
      headers: this.getHeaders()
    });
  }
}
________________________________________
✅ 3. AppointmentService – for booking, updating, canceling appointments
📄 appointment.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AppointmentService {
  private baseUrl = 'http://localhost:8080/api/appointments';

  constructor(private http: HttpClient, private auth: AuthService) {}

  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      Authorization: `Bearer ${this.auth.getToken()}`
    });
  }

  bookAppointment(data: any): Observable<any> {
    return this.http.post(this.baseUrl, data, {
      headers: this.getHeaders()
    });
  }

  getAppointmentsForPatient(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/patient`, {
      headers: this.getHeaders()
    });
  }

  getAppointmentsForDoctor(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/doctor`, {
      headers: this.getHeaders()
    });
  }

  cancelAppointment(id: number): Observable<any> {
    return this.http.delete(`${this.baseUrl}/${id}`, {
      headers: this.getHeaders()
    });
  }

  updateAppointmentStatus(id: number, status: string): Observable<any> {
    return this.http.put(`${this.baseUrl}/${id}/status`, { status }, {
      headers: this.getHeaders()
    });
  }
}
________________________________________
🧩 Usage Notes
•	Import HttpClientModule once in app.config.ts or your main bootstrap module.
•	All services use Bearer <JWT> for authenticated routes.
•	AuthService decodes JWT to extract email (used in dashboards).
________________________________________
✅ Services complete! These will make your frontend logic cleaner, reusable, and secure.
Would you like me to now help:
•	✅ Plug these services into components?
•	📋 Start on consultation records module?
•	🎨 Final touch-ups and deployment prep?
Let me know how you’d like to continue!

