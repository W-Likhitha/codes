when a patient login then they should be redirected in to patient dashboard where in in the header in place of register/login it should change to profile  and in the page left side(not in header but body left) there should be in line order from top to bottom with option like book appointment,my appointments,my details,consultation history that doctor gave of each appointment and use the above 2nd pic as template for booking appointments(like when clicked on the book appointment on the left side then it should open with all the doctors (as the first pic I gave)with their name,specialization,and book appointment option,there when they click book appointment then it should open like the 2nd pic I gave means the doctor details with booking slots under that dates and under that time slots to book,and if another patient has booked the appointment then the particular slot time should become grey colour and if not booked in normal and down we should mention that normal colour :available slots,grey colour:(already booked ,if u wanna be in waiting this list for this particular slot u can)make that's good sentence and under that book appointment button which successful appointment booking

Awesome, Likhitha! Let‚Äôs begin by building your **Patient Sidebar** component inside the `dashboard-patient` page.

---

## ‚úÖ Step 1: Generate Sidebar Component

üì¶ Folder structure:
We‚Äôll place it under `src/app/pages/dashboard-patient/components/`

### ‚ñ∂Ô∏è Run this Angular CLI command:

```bash
cd src/app/pages/dashboard-patient
ng generate component components/patient-sidebar --standalone --flat --skip-tests
```

This will create:

```
dashboard-patient/
  components/
    patient-sidebar.component.ts
    patient-sidebar.component.html
    patient-sidebar.component.css
```

---

## ‚úÖ Step 2: patient-sidebar.component.ts

```ts
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-patient-sidebar',
  standalone: true,
  imports: [RouterModule],
  templateUrl: './patient-sidebar.component.html',
  styleUrls: ['./patient-sidebar.component.css']
})
export class PatientSidebarComponent {}
```

---

## ‚úÖ Step 3: patient-sidebar.component.html

```html
<div class="sidebar">
  <ul>
    <li><a routerLink="/dashboard-patient/book-appointment" routerLinkActive="active">Book Appointment</a></li>
    <li><a routerLink="/dashboard-patient/my-appointments" routerLinkActive="active">My Appointments</a></li>
    <li><a routerLink="/dashboard-patient/my-details" routerLinkActive="active">My Details</a></li>
    <li><a routerLink="/dashboard-patient/consultation-history" routerLinkActive="active">Consultation History</a></li>
  </ul>
</div>
```

---

## ‚úÖ Step 4: patient-sidebar.component.css

```css
.sidebar {
  width: 220px;
  background-color: #f2f2f2;
  padding: 20px;
  height: 100%;
  position: sticky;
  top: 0;
}

.sidebar ul {
  list-style: none;
  padding-left: 0;
}

.sidebar li {
  margin: 20px 0;
}

.sidebar a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
}

.sidebar a.active {
  color: #007bff;
}
```

---

## ‚úÖ Step 5: Use Sidebar in `dashboard-patient.component.ts`

Update `dashboard-patient.component.ts` to import and include the sidebar:

```ts
import { Component } from '@angular/core';
import { PatientSidebarComponent } from './components/patient-sidebar.component';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-dashboard-patient',
  standalone: true,
  imports: [PatientSidebarComponent, RouterOutlet],
  templateUrl: './dashboard-patient.component.html',
  styleUrls: ['./dashboard-patient.component.css']
})
export class DashboardPatientComponent {}
```

---

## ‚úÖ Step 6: dashboard-patient.component.html

```html
<div class="dashboard-container">
  <app-patient-sidebar></app-patient-sidebar>

  <div class="dashboard-content">
    <router-outlet></router-outlet>
  </div>
</div>
```

---

## ‚úÖ Step 7: dashboard-patient.component.css

```css
.dashboard-container {
  display: flex;
  min-height: 100vh;
}

.dashboard-content {
  flex: 1;
  padding: 20px;
}
```

---

## ‚úÖ Navigation Setup (Optional if not yet done)

Update `app.routes.ts` to add child routes under `/dashboard-patient`:

```ts
{
  path: 'dashboard-patient',
  component: DashboardPatientComponent,
  children: [
    { path: 'book-appointment', component: BookAppointmentComponent },
    { path: 'my-appointments', component: PatientAppointmentsComponent },
    { path: 'my-details', component: PatientDetailsComponent },
    { path: 'consultation-history', component: ConsultationHistoryComponent },
    { path: '', redirectTo: 'book-appointment', pathMatch: 'full' }
  ]
}
```

---

‚úÖ Done! You now have a clean **left-side vertical menu** for the patient dashboard.

Next step?
üëâ I‚Äôll generate the **doctor listing UI** (like your 1st reference image) to be shown when they click ‚ÄúBook Appointment‚Äù in the sidebar.

Say `yes` to continue with doctor list.

Perfect! Let‚Äôs now implement the **‚ÄúBook Appointment‚Äù page** that shows the list of doctors ‚Äî just like the **first reference image you shared** (Prashanth Hospitals style).

---

## ‚úÖ Step 1: Generate Book Appointment Component (if not created yet)

```bash
cd src/app/pages
ng generate component book-appointment --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: book-appointment.component.ts

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AppointmentService } from '../../services/appointment/appointment.service';
import { AuthService } from '../../services/auth/auth.service';

@Component({
  selector: 'app-book-appointment',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './book-appointment.component.html',
  styleUrls: ['./book-appointment.component.css']
})
export class BookAppointmentComponent implements OnInit {
  doctors: any[] = [];
  message = '';

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.appointmentService.getAllDoctors().subscribe({
      next: (res: any[]) => this.doctors = res,
      error: () => this.message = 'Failed to load doctor list.'
    });
  }

  book(doctor: any): void {
    this.router.navigate(['/dashboard-patient/book-appointment', doctor.id]); // doctor detail page
  }
}
```

> Make sure your backend has a `/doctors` endpoint returning doctor list.

---

## ‚úÖ Step 3: book-appointment.component.html

```html
<h2>Available Doctors</h2>

<div *ngIf="message" class="error">{{ message }}</div>

<div class="doctor-grid">
  <div *ngFor="let doctor of doctors" class="doctor-card">
    <img [src]="doctor.imageUrl || 'assets/images/doctor-default.png'" alt="Doctor Photo" class="doctor-img" />
    <h4>{{ doctor.name }}</h4>
    <p>{{ doctor.specialization }}</p>
    <button (click)="book(doctor)">Book Appointment</button>
  </div>
</div>
```

---

## ‚úÖ Step 4: book-appointment.component.css

```css
h2 {
  margin-bottom: 20px;
}

.doctor-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
}

.doctor-card {
  width: 240px;
  border: 1px solid #ccc;
  border-radius: 12px;
  padding: 16px;
  text-align: center;
  background: #fff;
  box-shadow: 0 4px 12px rgba(0,0,0,0.05);
}

.doctor-img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 50%;
  margin-bottom: 12px;
}

button {
  background-color: #007bff;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}
```

---

## ‚úÖ Step 5: Add Route in `app.routes.ts`

Inside the `dashboard-patient` child routes:

```ts
{ path: 'book-appointment', component: BookAppointmentComponent },
{ path: 'book-appointment/:doctorId', component: DoctorSlotBookingComponent }, // next page
```

---

‚úÖ Done!

When a patient clicks **"Book Appointment"** in the sidebar:

* They see a modern grid of doctor cards
* Each card has image, name, specialization, and a **Book Appointment** button
* Clicking that takes them to the **slot selection screen** (like your second reference image)

---

Shall I proceed with the **doctor slot selection screen UI** next (the one with booking pills, time slots, disabled/available logic)?
Just say: `yes, slot selection`

Awesome, Likhitha! Let‚Äôs now build the **Doctor Slot Booking page** ‚Äî just like your **2nd reference image** (with pill-style dates, selectable time slots, and grey-out for booked ones).

---

## ‚úÖ OVERVIEW

When patient clicks **"Book Appointment"** on a doctor card:

* They are routed to `/dashboard-patient/book-appointment/:doctorId`
* This page:

  * Shows full doctor profile
  * Lets the user select a date (as pills)
  * Shows all time slots for that day
  * Disabled grey buttons for already booked slots
  * Highlights availability guide
  * Allows booking

---

## ‚úÖ Step 1: Generate the Component

```bash
cd src/app/pages/book-appointment
ng generate component doctor-slot-booking --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: doctor-slot-booking.component.ts

```ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AppointmentService } from '../../services/appointment/appointment.service';

@Component({
  selector: 'app-doctor-slot-booking',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './doctor-slot-booking.component.html',
  styleUrls: ['./doctor-slot-booking.component.css']
})
export class DoctorSlotBookingComponent implements OnInit {
  doctorId: number = 0;
  doctor: any;
  dates: string[] = [];
  selectedDate = '';
  selectedSlot = '';
  allSlots = ['09:00 AM', '09:30 AM', '10:00 AM', '10:30 AM', '11:00 AM', '11:30 AM'];
  bookedSlots: string[] = [];
  message = '';

  constructor(
    private route: ActivatedRoute,
    private appointmentService: AppointmentService
  ) {}

  ngOnInit(): void {
    this.doctorId = +this.route.snapshot.paramMap.get('doctorId')!;
    this.generateNext7Days();
    this.loadDoctorDetails();
  }

  generateNext7Days() {
    const today = new Date();
    this.dates = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      this.dates.push(date.toISOString().split('T')[0]);
    }
    this.selectedDate = this.dates[0];
    this.loadBookedSlots();
  }

  loadDoctorDetails() {
    this.appointmentService.getDoctorById(this.doctorId).subscribe({
      next: (res) => this.doctor = res,
      error: () => this.message = 'Doctor not found.'
    });
  }

  loadBookedSlots() {
    this.appointmentService.getBookedSlots(this.doctorId, this.selectedDate).subscribe({
      next: (res) => this.bookedSlots = res,
      error: () => this.bookedSlots = []
    });
  }

  onDateChange(date: string) {
    this.selectedDate = date;
    this.selectedSlot = '';
    this.loadBookedSlots();
  }

  isBooked(slot: string): boolean {
    return this.bookedSlots.includes(slot);
  }

  bookAppointment() {
    if (!this.selectedSlot) {
      this.message = 'Please select a time slot.';
      return;
    }

    const appointment = {
      doctorId: this.doctorId,
      date: this.selectedDate,
      timeSlot: this.selectedSlot
    };

    this.appointmentService.bookAppointment(appointment).subscribe({
      next: () => {
        this.message = 'Appointment booked successfully!';
        this.loadBookedSlots(); // refresh slots
      },
      error: () => this.message = 'Could not book appointment.'
    });
  }
}
```

---

## ‚úÖ Step 3: doctor-slot-booking.component.html

```html
<div class="doctor-profile" *ngIf="doctor">
  <img [src]="doctor.imageUrl || 'assets/images/doctor-default.png'" alt="Doctor" />
  <div>
    <h2>{{ doctor.name }}</h2>
    <p>{{ doctor.specialization }}</p>
    <p><strong>Qualification:</strong> {{ doctor.qualification }}</p>
    <p><strong>Experience:</strong> {{ doctor.experience || '2 years' }}</p>
    <p><strong>About:</strong> {{ doctor.about || 'Experienced and compassionate.' }}</p>
  </div>
</div>

<hr />

<h3>Select a date:</h3>
<div class="date-pills">
  <button
    *ngFor="let d of dates"
    [class.selected]="selectedDate === d"
    (click)="onDateChange(d)">
    {{ d }}
  </button>
</div>

<h3>Select a time slot:</h3>
<div class="slot-buttons">
  <button
    *ngFor="let slot of allSlots"
    [disabled]="isBooked(slot)"
    [class.booked]="isBooked(slot)"
    [class.selected]="slot === selectedSlot"
    (click)="selectedSlot = slot">
    {{ slot }}
  </button>
</div>

<div class="legend">
  <span class="available-box"></span> Available
  <span class="booked-box"></span> Booked
</div>

<p class="note">
  Grey slots are already booked. If you still want this slot, we can place you in a waiting list for that time.
</p>

<button (click)="bookAppointment()">Book Appointment</button>

<p *ngIf="message" class="status-msg">{{ message }}</p>
```

---

## ‚úÖ Step 4: doctor-slot-booking.component.css

```css
.doctor-profile {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.doctor-profile img {
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
}

.date-pills button {
  margin: 5px;
  padding: 10px 14px;
  border-radius: 25px;
  border: 1px solid #ccc;
  background: #eee;
  cursor: pointer;
}

.date-pills button.selected {
  background-color: #007bff;
  color: white;
}

.slot-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 10px 0;
}

.slot-buttons button {
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

.slot-buttons button.booked {
  background-color: grey;
  cursor: not-allowed;
}

.slot-buttons button.selected {
  border: 2px solid #222;
}

.legend {
  margin: 10px 0;
}

.available-box,
.booked-box {
  width: 15px;
  height: 15px;
  display: inline-block;
  margin-right: 5px;
  vertical-align: middle;
  border-radius: 3px;
}

.available-box {
  background-color: #007bff;
}

.booked-box {
  background-color: grey;
}

.note {
  margin-top: 5px;
  font-size: 14px;
  color: #555;
}

.status-msg {
  margin-top: 10px;
  font-weight: bold;
}
```

---

## üõ†Ô∏è Final Backend Calls Needed

Your `AppointmentService` should have:

```ts
getDoctorById(id: number): Observable<any> { ... }
getBookedSlots(doctorId: number, date: string): Observable<string[]> { ... }
bookAppointment(data: any): Observable<any> { ... }
```

---

### ‚úÖ Done!

You now have a clean, professional appointment booking screen:

* üíä Pill-style dates
* ‚è∞ Time slots, dynamically greyed if booked
* üßæ Confirmation + status message
* üóÉÔ∏è Doctor detail layout

---

Shall I now help you implement **My Appointments view** or **Consultation history section** next?
Just say: `yes, my appointments` or `yes, consultation history`.

Awesome! Let‚Äôs now build the **"My Appointments"** view for patients ‚Äî so they can:

‚úÖ View all their appointments
‚úÖ See status (BOOKED / COMPLETED)
‚úÖ Update or cancel upcoming appointments
‚úÖ See basic doctor info for each booking

---

## ‚úÖ Step 1: Generate the Component

üìÅ Under `src/app/pages/dashboard-patient`:

```bash
ng generate component pages/dashboard-patient/pages/my-appointments --standalone --flat --skip-tests
```

This creates:

```
dashboard-patient/
  pages/
    my-appointments.component.ts
    my-appointments.component.html
    my-appointments.component.css
```

---

## ‚úÖ Step 2: `my-appointments.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AppointmentService } from '../../../services/appointment/appointment.service';
import { AuthService } from '../../../services/auth/auth.service';

@Component({
  selector: 'app-my-appointments',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './my-appointments.component.html',
  styleUrls: ['./my-appointments.component.css']
})
export class MyAppointmentsComponent implements OnInit {
  appointments: any[] = [];
  message = '';

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    const patientId = this.authService.getUserIdFromToken();
    if (!patientId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.appointmentService.getAppointmentsForPatient(patientId).subscribe({
      next: (res) => this.appointments = res,
      error: () => this.message = 'Failed to load appointments.'
    });
  }

  cancel(id: number): void {
    this.appointmentService.cancelAppointment(id).subscribe({
      next: () => {
        this.message = 'Appointment cancelled.';
        this.appointments = this.appointments.filter(a => a.appointmentId !== id);
      },
      error: () => this.message = 'Could not cancel appointment.'
    });
  }
}
```

---

## ‚úÖ Step 3: `my-appointments.component.html`

```html
<h2>My Appointments</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="appointments.length > 0; else noAppointments">
  <div *ngFor="let appt of appointments" class="appointment-card">
    <p><strong>Doctor:</strong> {{ appt.doctorName }}</p>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>

    <button *ngIf="appt.status === 'BOOKED'" (click)="cancel(appt.appointmentId)">
      Cancel Appointment
    </button>
  </div>
</div>

<ng-template #noAppointments>
  <p>No appointments found.</p>
</ng-template>
```

---

## ‚úÖ Step 4: `my-appointments.component.css`

```css
h2 {
  margin-bottom: 20px;
}

.appointment-card {
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 15px;
  background-color: #f9f9f9;
}

button {
  background-color: #dc3545;
  color: white;
  padding: 6px 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #c82333;
}

.info {
  color: green;
  margin-bottom: 10px;
}
```

---

## ‚úÖ Step 5: Add to Router

In `app.routes.ts` under `dashboard-patient` children:

```ts
{ path: 'my-appointments', component: MyAppointmentsComponent },
```

---

## ‚úÖ Done!

Now your **patients can see their appointments**, cancel any booked ones, and get status updates.

Would you like to move on to the next item ‚Äî
üëâ `yes, consultation history`
or
üëâ `yes, my details`?

Let me know!

Perfect, Likhitha! Let‚Äôs now implement the **Consultation History** view in the **Patient Dashboard** ‚Äî so patients can:

‚úÖ View doctor notes & prescriptions
‚úÖ See which doctor consulted them
‚úÖ Match each consultation to an appointment

---

## ‚úÖ Step 1: Generate Component

üìÅ Under `src/app/pages/dashboard-patient`:

```bash
ng generate component pages/dashboard-patient/pages/consultation-history --standalone --flat --skip-tests
```

This will create:

```
dashboard-patient/
  pages/
    consultation-history.component.ts
    consultation-history.component.html
    consultation-history.component.css
```

---

## ‚úÖ Step 2: `consultation-history.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AppointmentService } from '../../../services/appointment/appointment.service';
import { AuthService } from '../../../services/auth/auth.service';

@Component({
  selector: 'app-consultation-history',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './consultation-history.component.html',
  styleUrls: ['./consultation-history.component.css']
})
export class ConsultationHistoryComponent implements OnInit {
  consultations: any[] = [];
  message = '';

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    const patientId = this.authService.getUserIdFromToken();
    if (!patientId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.appointmentService.getConsultationsForPatient(patientId).subscribe({
      next: (res) => this.consultations = res,
      error: () => this.message = 'Failed to load consultation history.'
    });
  }
}
```

---

## ‚úÖ Step 3: `consultation-history.component.html`

```html
<h2>Consultation History</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="consultations.length > 0; else noData">
  <div *ngFor="let consult of consultations" class="consultation-card">
    <p><strong>Date:</strong> {{ consult.date }}</p>
    <p><strong>Doctor:</strong> {{ consult.doctorName }}</p>
    <p><strong>Diagnosis:</strong> {{ consult.notes }}</p>
    <p><strong>Prescription:</strong> {{ consult.prescription }}</p>
  </div>
</div>

<ng-template #noData>
  <p>No consultation records found.</p>
</ng-template>
```

---

## ‚úÖ Step 4: `consultation-history.component.css`

```css
h2 {
  margin-bottom: 20px;
}

.consultation-card {
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 15px;
  background-color: #fff;
}

.info {
  color: #007bff;
  margin-bottom: 10px;
}
```

---

## ‚úÖ Step 5: Add Route

In `app.routes.ts`, under `dashboard-patient` children:

```ts
{ path: 'consultation-history', component: ConsultationHistoryComponent },
```

---

## ‚úÖ Backend Endpoint

Your backend must expose something like:

```http
GET /consultations/patient/{patientId}
```

that returns:

```json
[
  {
    "date": "2025-06-20",
    "doctorName": "Dr. Arjun",
    "notes": "Patient recovering well from surgery",
    "prescription": "Amoxicillin 500mg for 5 days"
  }
]
```

Make sure `AppointmentService` has:

```ts
getConsultationsForPatient(patientId: number): Observable<any[]> { ... }
```

---

‚úÖ **All Set!** Patients can now view their medical consultation records.

Let me know if you‚Äôd like:
üëâ `yes, my details` screen next
üëâ Or start **Doctor Dashboard** setup instead!

Great, Likhitha! Let‚Äôs now build the **My Details** page inside the Patient Dashboard ‚Äî where patients can:

‚úÖ View their registered profile
‚úÖ Edit fields like name, phone, gender, place
‚úÖ Save changes using a backend update API

---

## ‚úÖ Step 1: Generate the Component

üìÅ Under `src/app/pages/dashboard-patient`:

```bash
ng generate component pages/dashboard-patient/pages/my-details --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: `my-details.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../../services/auth/auth.service';
import { PatientService } from '../../../services/patient/patient.service';

@Component({
  selector: 'app-my-details',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './my-details.component.html',
  styleUrls: ['./my-details.component.css']
})
export class MyDetailsComponent implements OnInit {
  patient: any = {};
  message = '';

  constructor(
    private authService: AuthService,
    private patientService: PatientService
  ) {}

  ngOnInit(): void {
    const patientId = this.authService.getUserIdFromToken();
    if (!patientId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.patientService.getPatientById(patientId).subscribe({
      next: (res) => this.patient = res,
      error: () => this.message = 'Failed to load patient details.'
    });
  }

  update(): void {
    this.patientService.updatePatient(this.patient.id, this.patient).subscribe({
      next: () => this.message = 'Details updated successfully!',
      error: () => this.message = 'Update failed. Please try again.'
    });
  }
}
```

---

## ‚úÖ Step 3: `my-details.component.html`

```html
<h2>My Profile</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="patient.id">
  <form (ngSubmit)="update()">
    <label>Name:</label>
    <input type="text" [(ngModel)]="patient.name" name="name" required />

    <label>Email:</label>
    <input type="email" [value]="patient.email" disabled />

    <label>Gender:</label>
    <input type="text" [(ngModel)]="patient.gender" name="gender" required />

    <label>Phone:</label>
    <input type="text" [(ngModel)]="patient.phone" name="phone" required />

    <label>Place:</label>
    <input type="text" [(ngModel)]="patient.place" name="place" required />

    <button type="submit">Update Details</button>
  </form>
</div>
```

---

## ‚úÖ Step 4: `my-details.component.css`

```css
h2 {
  margin-bottom: 20px;
}

form {
  display: flex;
  flex-direction: column;
  max-width: 400px;
}

label {
  margin-top: 12px;
  font-weight: bold;
}

input {
  padding: 8px;
  margin-top: 4px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

button {
  margin-top: 20px;
  padding: 10px;
  border: none;
  background-color: #28a745;
  color: white;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #218838;
}

.info {
  color: #007bff;
  margin-bottom: 10px;
}
```

---

## ‚úÖ Step 5: Add Route

In `app.routes.ts`, under `dashboard-patient` children:

```ts
{ path: 'my-details', component: MyDetailsComponent },
```

---

## ‚úÖ Backend Expectations

Patient service endpoints (from your Spring Boot backend):

* `GET /patients/{id}` ‚Üí fetch profile
* `PUT /patients/{id}` ‚Üí update profile

In your Angular service (`patient.service.ts`):

```ts
getPatientById(id: number): Observable<any> {
  return this.http.get(`${this.baseUrl}/patients/${id}`, {
    headers: this.authHeaders()
  });
}

updatePatient(id: number, data: any): Observable<any> {
  return this.http.put(`${this.baseUrl}/patients/${id}`, data, {
    headers: this.authHeaders()
  });
}
```

---

‚úÖ Done! Patients can now view & edit their profile details.

You're all set with:

* Book Appointment
* My Appointments
* Consultation History
* My Details

---

üîú Shall I now help you implement the **Doctor Dashboard**?

Just say:
üëâ `yes, doctor dashboard`
and I‚Äôll start with the sidebar + layout.

Great! Let‚Äôs now build the **Doctor Dashboard** just like the patient dashboard, but with doctor-specific features:

---

## ‚úÖ Doctor Dashboard Plan

### üî∑ Layout:

* **Header:** `WHospitals` logo on left, `Profile` on right (same as patient)
* **Left Sidebar** (inside body):

  * üìÖ My Appointments
  * ‚úçÔ∏è Write Consultation
  * üìÇ My Profile

### üî∑ Main Right Area:

* Displays selected section (via `<router-outlet>`)

---

## ‚úÖ Step 1: Generate Doctor Sidebar

üìÅ Inside `src/app/pages/dashboard-doctor/`:

```bash
ng generate component components/doctor-sidebar --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: `doctor-sidebar.component.ts`

```ts
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-doctor-sidebar',
  standalone: true,
  imports: [RouterModule],
  templateUrl: './doctor-sidebar.component.html',
  styleUrls: ['./doctor-sidebar.component.css']
})
export class DoctorSidebarComponent {}
```

---

## ‚úÖ Step 3: `doctor-sidebar.component.html`

```html
<div class="sidebar">
  <ul>
    <li><a routerLink="/dashboard-doctor/my-appointments" routerLinkActive="active">My Appointments</a></li>
    <li><a routerLink="/dashboard-doctor/write-consultation" routerLinkActive="active">Write Consultation</a></li>
    <li><a routerLink="/dashboard-doctor/my-profile" routerLinkActive="active">My Profile</a></li>
  </ul>
</div>
```

---

## ‚úÖ Step 4: `doctor-sidebar.component.css`

```css
.sidebar {
  width: 220px;
  background-color: #f2f2f2;
  padding: 20px;
  height: 100vh;
  position: sticky;
  top: 0;
}

.sidebar ul {
  list-style: none;
  padding-left: 0;
}

.sidebar li {
  margin: 20px 0;
}

.sidebar a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
}

.sidebar a.active {
  color: #007bff;
}
```

---

## ‚úÖ Step 5: `dashboard-doctor.component.ts`

```ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { DoctorSidebarComponent } from './components/doctor-sidebar.component';

@Component({
  selector: 'app-dashboard-doctor',
  standalone: true,
  imports: [RouterOutlet, DoctorSidebarComponent],
  templateUrl: './dashboard-doctor.component.html',
  styleUrls: ['./dashboard-doctor.component.css']
})
export class DashboardDoctorComponent {}
```

---

## ‚úÖ Step 6: `dashboard-doctor.component.html`

```html
<div class="dashboard-container">
  <app-doctor-sidebar></app-doctor-sidebar>

  <div class="dashboard-content">
    <router-outlet></router-outlet>
  </div>
</div>
```

---

## ‚úÖ Step 7: `dashboard-doctor.component.css`

```css
.dashboard-container {
  display: flex;
  min-height: 100vh;
}

.dashboard-content {
  flex: 1;
  padding: 20px;
}
```

---

## ‚úÖ Step 8: Add Routing

In `app.routes.ts`:

```ts
{
  path: 'dashboard-doctor',
  component: DashboardDoctorComponent,
  children: [
    { path: 'my-appointments', component: DoctorAppointmentsComponent },
    { path: 'write-consultation', component: WriteConsultationComponent },
    { path: 'my-profile', component: DoctorProfileComponent },
    { path: '', redirectTo: 'my-appointments', pathMatch: 'full' }
  ]
}
```

---

‚úÖ Now you have:

* Doctor dashboard layout
* Sidebar navigation
* Routing placeholders

---

üîú Ready to proceed with:
üëâ `yes, doctor appointments`
(So the doctor can see all appointments and toggle status like BOOKED/COMPLETED)

Let me know to continue!

Perfect, Likhitha! Let‚Äôs now implement the **Doctor Appointments** view with these full features:

---

## ‚úÖ Requirements Recap

Doctor should:

* üîé View all their appointments
* ‚úèÔ∏è Update **follow-up notes**
* ‚úÖ Mark appointment as **COMPLETED**
* üîÑ Revert from COMPLETED ‚Üí BOOKED if needed
* üìÑ Each appointment card is **visually distinct** and shows patient info

---

## ‚úÖ Step 1: Generate Component

üìÅ Under `src/app/pages/dashboard-doctor/pages/`:

```bash
ng generate component pages/dashboard-doctor/pages/doctor-appointments --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: `doctor-appointments.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AppointmentService } from '../../../services/appointment/appointment.service';
import { AuthService } from '../../../services/auth/auth.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-doctor-appointments',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './doctor-appointments.component.html',
  styleUrls: ['./doctor-appointments.component.css']
})
export class DoctorAppointmentsComponent implements OnInit {
  appointments: any[] = [];
  message = '';

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    const doctorId = this.authService.getUserIdFromToken();
    if (!doctorId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.appointmentService.getAppointmentsForDoctor(doctorId).subscribe({
      next: (res) => this.appointments = res,
      error: () => this.message = 'Failed to load appointments.'
    });
  }

  updateStatus(appt: any): void {
    const newStatus = appt.status === 'COMPLETED' ? 'BOOKED' : 'COMPLETED';

    this.appointmentService.updateAppointmentStatus(appt.appointmentId, newStatus).subscribe({
      next: () => {
        appt.status = newStatus;
        this.message = 'Appointment status updated.';
      },
      error: () => this.message = 'Could not update appointment status.'
    });
  }

  updateFollowUp(appt: any): void {
    this.appointmentService.updateFollowUpStatus(appt.appointmentId, {
      followUp: appt.followUp
    }).subscribe({
      next: () => this.message = 'Follow-up updated.',
      error: () => this.message = 'Failed to update follow-up.'
    });
  }
}
```

---

## ‚úÖ Step 3: `doctor-appointments.component.html`

```html
<h2>My Appointments</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="appointments.length > 0; else noData">
  <div *ngFor="let appt of appointments" class="appointment-card">
    <p><strong>Patient:</strong> {{ appt.patientName }}</p>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>

    <label>Follow-Up Notes:</label>
    <textarea [(ngModel)]="appt.followUp" placeholder="Enter follow-up notes..."></textarea>

    <div class="button-group">
      <button (click)="updateFollowUp(appt)">Update Follow-Up</button>
      <button (click)="updateStatus(appt)">
        {{ appt.status === 'COMPLETED' ? 'Mark as BOOKED' : 'Mark as COMPLETED' }}
      </button>
    </div>
  </div>
</div>

<ng-template #noData>
  <p>No appointments found.</p>
</ng-template>
```

---

## ‚úÖ Step 4: `doctor-appointments.component.css`

```css
h2 {
  margin-bottom: 20px;
}

.appointment-card {
  border: 1px solid #ccc;
  padding: 16px;
  border-radius: 12px;
  margin-bottom: 20px;
  background: #fefefe;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

textarea {
  width: 100%;
  height: 60px;
  margin-top: 6px;
  padding: 6px;
  border-radius: 6px;
  border: 1px solid #ddd;
  resize: vertical;
}

.button-group {
  margin-top: 12px;
}

button {
  margin-right: 10px;
  padding: 8px 14px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

button:first-child {
  background-color: #17a2b8;
  color: white;
}

button:last-child {
  background-color: #28a745;
  color: white;
}

button:last-child:hover {
  background-color: #218838;
}

.info {
  color: #007bff;
  margin-bottom: 12px;
}
```

---

## ‚úÖ Step 5: Add Routing

In `app.routes.ts`, under `dashboard-doctor`:

```ts
{ path: 'my-appointments', component: DoctorAppointmentsComponent },
```

---

## ‚úÖ AppointmentService Methods

Ensure your `appointment.service.ts` has:

```ts
updateFollowUpStatus(appointmentId: number, data: any): Observable<any> {
  return this.http.put(`${this.baseUrl}/appointments/update/followUp/update/${appointmentId}`, data, {
    headers: this.authHeaders()
  });
}

updateAppointmentStatus(appointmentId: number, status: string): Observable<any> {
  const body = { followUp: status === 'COMPLETED' };
  return this.http.put(`${this.baseUrl}/appointments/update/followUp/update/${appointmentId}`, body, {
    headers: this.authHeaders()
  });
}
```

‚úÖ These use your exact backend endpoints.

---

All set! The **Doctor Appointments page** now:

* Displays each patient‚Äôs appointment individually
* Lets the doctor enter follow-up notes
* Toggle status between BOOKED ‚Üî COMPLETED

---

Would you like to now:
üëâ `yes, write consultation page`
üëâ or `yes, doctor profile update`?

Let me know!

Perfect, Likhitha! Let‚Äôs implement the **‚ÄúWrite Consultation‚Äù** page where a doctor can:

‚úÖ See a list of today's appointments (or select a patient)
‚úÖ Fill in consultation notes & prescription
‚úÖ Save the consultation mapped to a specific appointment

---

## ‚úÖ 1. Use Case Summary

* Doctor logs in and goes to: `Write Consultation`
* Selects from list of `BOOKED` appointments
* For each:

  * Enters **notes** and **prescription**
  * Submits the consultation
  * That data gets saved under the patient's consultation history

---

## ‚úÖ Step 1: Generate Component

üìÅ Inside `dashboard-doctor/pages`:

```bash
ng generate component pages/dashboard-doctor/pages/write-consultation --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: `write-consultation.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AppointmentService } from '../../../services/appointment/appointment.service';
import { AuthService } from '../../../services/auth/auth.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-write-consultation',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './write-consultation.component.html',
  styleUrls: ['./write-consultation.component.css']
})
export class WriteConsultationComponent implements OnInit {
  appointments: any[] = [];
  message = '';

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService
  ) {}

  ngOnInit(): void {
    const doctorId = this.authService.getUserIdFromToken();
    if (!doctorId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.appointmentService.getAppointmentsForDoctor(doctorId).subscribe({
      next: (res) => {
        // Only show appointments that are still "BOOKED"
        this.appointments = res.filter(a => a.status === 'BOOKED');
      },
      error: () => this.message = 'Could not load appointments.'
    });
  }

  submitConsultation(appt: any): void {
    const data = {
      appointmentId: appt.appointmentId,
      notes: appt.notes,
      prescription: appt.prescription
    };

    this.appointmentService.saveConsultation(data).subscribe({
      next: () => {
        this.message = 'Consultation saved!';
        appt.notes = '';
        appt.prescription = '';
      },
      error: () => this.message = 'Failed to save consultation.'
    });
  }
}
```

---

## ‚úÖ Step 3: `write-consultation.component.html`

```html
<h2>Write Consultation</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="appointments.length > 0; else noAppointments">
  <div *ngFor="let appt of appointments" class="consult-card">
    <p><strong>Patient:</strong> {{ appt.patientName }}</p>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>

    <label>Consultation Notes:</label>
    <textarea [(ngModel)]="appt.notes" placeholder="Diagnosis, observations..."></textarea>

    <label>Prescription:</label>
    <textarea [(ngModel)]="appt.prescription" placeholder="Medicine, dosage..."></textarea>

    <button (click)="submitConsultation(appt)">Submit Consultation</button>
  </div>
</div>

<ng-template #noAppointments>
  <p>No booked appointments to consult.</p>
</ng-template>
```

---

## ‚úÖ Step 4: `write-consultation.component.css`

```css
h2 {
  margin-bottom: 20px;
}

.consult-card {
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 12px;
  margin-bottom: 20px;
  background: #fefefe;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}

textarea {
  width: 100%;
  min-height: 60px;
  margin-top: 6px;
  padding: 6px;
  border-radius: 6px;
  border: 1px solid #ddd;
  resize: vertical;
}

label {
  display: block;
  margin-top: 12px;
  font-weight: bold;
}

button {
  margin-top: 12px;
  padding: 10px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.info {
  margin-bottom: 10px;
  color: green;
}
```

---

## ‚úÖ Step 5: Add Route

In `app.routes.ts`, under `dashboard-doctor` routes:

```ts
{ path: 'write-consultation', component: WriteConsultationComponent },
```

---

## ‚úÖ Backend Expectations

Make sure your Spring Boot backend exposes:

```http
POST /consultations/save
Body: {
  appointmentId: number,
  notes: string,
  prescription: string
}
```

And your `AppointmentService` in Angular has:

```ts
saveConsultation(data: any): Observable<any> {
  return this.http.post(`${this.baseUrl}/consultations/save`, data, {
    headers: this.authHeaders()
  });
}
```

---

‚úÖ Done! Your doctor can now:

* View today's booked appointments
* Write consultation notes + prescription
* Save that to patient history with one click

---

Would you like to finish with:
üëâ `yes, doctor profile update`
or proceed to UI polishing / deployment setup?

Great, Likhitha! Let's now build the final piece: the **Doctor Profile Update Page**, so the doctor can:

‚úÖ View their profile
‚úÖ Edit fields like name, phone, specialization, qualification, room number
‚úÖ Submit changes to the backend

---

## ‚úÖ Step 1: Generate the Component

üìÅ Under `src/app/pages/dashboard-doctor/pages`:

```bash
ng generate component pages/dashboard-doctor/pages/doctor-profile --standalone --flat --skip-tests
```

---

## ‚úÖ Step 2: `doctor-profile.component.ts`

```ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../../services/auth/auth.service';
import { DoctorService } from '../../../services/doctor/doctor.service';

@Component({
  selector: 'app-doctor-profile',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './doctor-profile.component.html',
  styleUrls: ['./doctor-profile.component.css']
})
export class DoctorProfileComponent implements OnInit {
  doctor: any = {};
  message = '';

  constructor(
    private authService: AuthService,
    private doctorService: DoctorService
  ) {}

  ngOnInit(): void {
    const doctorId = this.authService.getUserIdFromToken();
    if (!doctorId) {
      this.message = 'You must be logged in.';
      return;
    }

    this.doctorService.getDoctorById(doctorId).subscribe({
      next: (res) => this.doctor = res,
      error: () => this.message = 'Failed to load doctor profile.'
    });
  }

  update(): void {
    this.doctorService.updateDoctor(this.doctor.id, this.doctor).subscribe({
      next: () => this.message = 'Profile updated successfully!',
      error: () => this.message = 'Failed to update profile.'
    });
  }
}
```

---

## ‚úÖ Step 3: `doctor-profile.component.html`

```html
<h2>My Profile</h2>

<div *ngIf="message" class="info">{{ message }}</div>

<div *ngIf="doctor.id">
  <form (ngSubmit)="update()">
    <label>Name:</label>
    <input type="text" [(ngModel)]="doctor.name" name="name" required />

    <label>Email:</label>
    <input type="email" [value]="doctor.email" disabled />

    <label>Gender:</label>
    <input type="text" [(ngModel)]="doctor.gender" name="gender" required />

    <label>Phone:</label>
    <input type="text" [(ngModel)]="doctor.phone" name="phone" required />

    <label>Specialization:</label>
    <input type="text" [(ngModel)]="doctor.specialization" name="specialization" required />

    <label>Qualification:</label>
    <input type="text" [(ngModel)]="doctor.qualification" name="qualification" required />

    <label>Room Number:</label>
    <input type="text" [(ngModel)]="doctor.roomNumber" name="roomNumber" />

    <button type="submit">Update Profile</button>
  </form>
</div>
```

---

## ‚úÖ Step 4: `doctor-profile.component.css`

```css
h2 {
  margin-bottom: 20px;
}

form {
  display: flex;
  flex-direction: column;
  max-width: 400px;
}

label {
  margin-top: 12px;
  font-weight: bold;
}

input {
  padding: 8px;
  margin-top: 4px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

button {
  margin-top: 20px;
  padding: 10px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.info {
  color: #28a745;
  margin-bottom: 10px;
}
```

---

## ‚úÖ Step 5: Add Routing

In `app.routes.ts`, under `dashboard-doctor` children:

```ts
{ path: 'my-profile', component: DoctorProfileComponent },
```

---

## ‚úÖ Backend Integration (Spring Boot)

Make sure your Spring Boot backend supports:

* `GET /doctors/{id}` ‚Üí fetch profile
* `PUT /doctors/{id}` ‚Üí update doctor

In Angular `doctor.service.ts`:

```ts
getDoctorById(id: number): Observable<any> {
  return this.http.get(`${this.baseUrl}/doctors/${id}`, {
    headers: this.authHeaders()
  });
}

updateDoctor(id: number, data: any): Observable<any> {
  return this.http.put(`${this.baseUrl}/doctors/${id}`, data, {
    headers: this.authHeaders()
  });
}
```

---

‚úÖ That‚Äôs it! Now your **Doctor Profile page is complete** with:

* Full editable form
* Profile fetching from backend
* Save/update on submit

---

üéâ **Doctor Dashboard is now fully implemented!**
You now have:

* My Appointments ‚úÖ
* Write Consultation ‚úÖ
* My Profile ‚úÖ

Would you like me to help you:

* üöÄ Set up default route guards?
* üß™ Set up testing/Postman?
* üåç Prepare deployment build?

Just say what you‚Äôd like next!

Great question, Likhitha! This is a **common logic** in healthcare portals ‚Äî and it‚Äôs very simple to handle in Angular using a conditional navigation check.

---

## ‚úÖ Your Requirement Recap:

| Scenario                                                           | Behavior                                          |
| ------------------------------------------------------------------ | ------------------------------------------------- |
| üîì User not logged in & clicks **Book Appointment** (on Home page) | Redirect to `/login`                              |
| üîí User is logged in & clicks **Book Appointment** (inside app)    | Redirect to `/dashboard-patient/book-appointment` |

---

## ‚úÖ Solution Approach:

In the `book appointment` button (on the Home page or any public page), use a function to **check if token exists** (i.e., logged in), and based on that navigate.

---

### ‚úÖ Step 1: Update the Button in `home.component.html`

```html
<button (click)="handleBookAppointment()">Book Appointment</button>
```

---

### ‚úÖ Step 2: Implement Logic in `home.component.ts`

```ts
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  constructor(private router: Router) {}

  handleBookAppointment(): void {
    const token = localStorage.getItem('token');
    if (token) {
      this.router.navigate(['/dashboard-patient/book-appointment']);
    } else {
      this.router.navigate(['/login']);
    }
  }
}
```

‚úÖ This checks whether the user is authenticated using the `token`, and navigates accordingly.

---

### üõ° Bonus: Want Role-Based Check Too?

If you want to **only allow Patients** to book appointments:

```ts
const token = localStorage.getItem('token');
const role = localStorage.getItem('role');

if (!token) {
  this.router.navigate(['/login']);
} else if (role === 'PATIENT') {
  this.router.navigate(['/dashboard-patient/book-appointment']);
} else {
  alert('Only patients can book appointments!');
}
```

---

‚úÖ That‚Äôs it!
This logic will **redirect unauthenticated users to login**, and **allow logged-in patients** to continue booking.

Let me know if you want this wrapped into a reusable service or applied to route guards too!
