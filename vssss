<div class="auth-container">
  <header class="auth-header">
    <img src="assets/logo.png" class="logo" alt="YHospitals Logo" />
    <div class="right-link">
      <span>Already have an account?</span>
      <a routerLink="/login">Sign In</a>
    </div>
  </header>

  <main class="auth-body">
    <div class="register-box">
      <h2>Sign Up for YHospitals</h2>

      <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
        <input type="email" placeholder="Email" formControlName="email" required />
        <input type="text" placeholder="Username" formControlName="username" required />
        <input type="password" placeholder="Password" formControlName="password" required />
        <input type="text" placeholder="Gender" formControlName="gender" required />
        <input type="text" placeholder="Phone Number" formControlName="phoneNumber" required />

        <select formControlName="role" (change)="onRoleChange($event.target.value)">
          <option value="">Select Role</option>
          <option value="DOCTOR">Doctor</option>
          <option value="PATIENT">Patient</option>
        </select>

        <!-- Doctor Fields -->
        <div *ngIf="isDoctor">
          <input type="text" placeholder="Specialization" formControlName="specialization" />
          <input type="text" placeholder="Qualification" formControlName="qualification" />
          <input type="text" placeholder="Room Number (optional)" formControlName="roomNumber" />
        </div>

        <!-- Patient Fields -->
        <div *ngIf="isPatient">
          <input type="text" placeholder="Place" formControlName="place" />
          <input type="text" placeholder="Disease (optional)" formControlName="disease" />
        </div>

        <button class="submit-btn" type="submit" [disabled]="registerForm.invalid">Submit</button>
      </form>
    </div>
  </main>
</div>



/* Reuse login styles with tweaks */
.register-box {
  background: white;
  padding: 30px;
  border-radius: 10px;
  width: 400px;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.register-box h2 {
  margin-bottom: 20px;
  color: #004080;
}

input, select {
  width: 100%;
  padding: 10px;
  margin-top: 12px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.submit-btn {
  margin-top: 20px;
  width: 100%;
  padding: 12px;
  background-color: #004080;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}



import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css'],
})
export class RegisterComponent {
  registerForm: FormGroup;
  isDoctor = false;
  isPatient = false;

  constructor(private fb: FormBuilder, private router: Router) {
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      username: ['', Validators.required],
      password: ['', Validators.required],
      gender: ['', Validators.required],
      phoneNumber: ['', Validators.required],
      role: ['', Validators.required],
      // Doctor
      specialization: [''],
      qualification: [''],
      roomNumber: [''],
      // Patient
      place: [''],
      disease: [''],
    });
  }

  onRoleChange(role: string) {
    this.isDoctor = role === 'DOCTOR';
    this.isPatient = role === 'PATIENT';

    if (this.isDoctor) {
      this.registerForm.get('specialization')?.setValidators(Validators.required);
      this.registerForm.get('qualification')?.setValidators(Validators.required);
    } else {
      this.registerForm.get('specialization')?.clearValidators();
      this.registerForm.get('qualification')?.clearValidators();
    }

    if (this.isPatient) {
      this.registerForm.get('place')?.setValidators(Validators.required);
    } else {
      this.registerForm.get('place')?.clearValidators();
    }

    this.registerForm.get('specialization')?.updateValueAndValidity();
    this.registerForm.get('qualification')?.updateValueAndValidity();
    this.registerForm.get('place')?.updateValueAndValidity();
  }

  onSubmit() {
    if (this.registerForm.valid) {
      const formData = this.registerForm.value;
      console.log('Registering user:', formData);
      // TODO: Connect to backend API
      this.router.navigate(['/login']);
    }
  }
}


import { RegisterComponent } from './pages/auth/register/register.component';

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
];


