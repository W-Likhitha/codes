auth.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';

export const authGuard: CanActivateFn = () => {
  const router = inject(Router);
  const token = localStorage.getItem('authToken');
  if (!token) {
    router.navigate(['/login']);
    return false;
  }
  return true;
};
----
auth.role.ts
import { inject } from '@angular/core';
import { CanActivateFn, ActivatedRouteSnapshot, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const authRoleGuard: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const router = inject(Router);
  const authService = inject(AuthService);
  const requiredRole = route.data['role'];
  const token = authService.getToken();

  if (!token) {
    router.navigate(['/login']);
    return false;
  }

  // Simple decode using atob. For production consider using jwt-decode.
  try {
    const payload = token.split('.')[1];
    const decoded = JSON.parse(atob(payload));
    if (decoded.role !== requiredRole) {
      router.navigate(['/']);
      return false;
    }
    return true;
  } catch (error) {
    console.error('Token decoding failed', error);
    router.navigate(['/login']);
    return false;
  }
};
----
src/app/interceptors/jwt.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';
import { AuthService } from '../services/auth.service';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  constructor(private auth: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler) {
    const token = this.auth.getToken();
    if (token) {
      req = req.clone({
        setHeaders: { Authorization: `Bearer ${token}` }
      });
    }
    return next.handle(req);
  }
}
-----
app/pages/about
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-about',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './about.component.html',
  styleUrls: ['./about.component.css']
})
export class AboutComponent {}
--
<div class="about-container">
    <h2>About YHospitals</h2>
    <p>Welcome to YHospitals, your trusted partner for healthcare management.
       We provide appointments with top specialists and a seamless healthcare experience.</p>
  </div>

--
.about-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .about-container h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .about-container p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: #333;
  }

--
pages/all-doctors
import { Component, OnInit } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-all-doctors',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './all-doctors.component.html',
  styleUrls: ['./all-doctors.component.css']
})
export class AllDoctorsComponent implements OnInit {
  doctors: any[] = [];

  constructor(private doctorService: DoctorService) {}

  ngOnInit(): void {
    this.doctorService.getAllDoctors().subscribe({
      next: (data) => this.doctors = data,
      error: (err) => console.error('Error fetching doctors', err)
    });
  }
}
--
<div class="doctor-list-container">
    <h2 class="title">Our Doctors</h2>
    <div class="doctor-card" *ngFor="let doctor of doctors">
      <img src="assets/doctor-placeholder.png" alt="Doctor Image">
      <h3>{{ doctor.username }}</h3>
      <p>Specialization: {{ doctor.specialization }}</p>
      <p>Status: 
        <span [class.available]="doctor.available" [class.unavailable]="!doctor.available">
          {{ doctor.available ? 'Available' : 'Not Available' }}
        </span>
      </p>
    </div>
  </div>
  --
.doctor-list-container {
    padding: 30px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    background-color: #f0f6fc;
  }
  
  .title {
    width: 100%;
    text-align: center;
    margin-bottom: 20px;
    font-size: 28px;
    font-weight: bold;
  }
  
  .doctor-card {
    width: 250px;
    border: 1px solid #dcdcdc;
    border-radius: 8px;
    padding: 15px;
    margin: 10px;
    background-color: #ffffff;
    text-align: center;
  }
  
  .doctor-card img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
  }
  
  .available {
    color: green;
    font-weight: bold;
  }
  
  .unavailable {
    color: red;
    font-weight: bold;
  }
  ----
pages/auth/login
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AuthService, UserRole } from '../../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  form: FormGroup;
  loginError?: string;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    // Build the reactive form with email and password fields.
    this.form = this.fb.group({
      email: ['', Validators.required],
      password: ['', Validators.required]
    });
  }

  onSubmit(): void {
    if (this.form.valid) {
      this.authService.login(this.form.value).subscribe({
        next: (res) => {
          // Save token with role and patientId if available.
          this.authService.saveToken(res.token, res.role, res.patientId);
          // Navigate to an appropriate page based on the role.
          if (res.role === 'patient') {
            this.router.navigate(['/book-appointment']);
          } else {
            this.router.navigate(['/dashboard-doctor']);
          }
        },
        error: (err) => {
          console.error('Login error', err);
          this.loginError = 'Invalid credentials';
        }
      });
    }
  }
}
--
<div class="login-container">
  <h2>Login</h2>
  <form [formGroup]="form" (ngSubmit)="onSubmit()">
    <div>
      <label for="email">Email:</label>
      <input id="email" type="email" formControlName="email" placeholder="Enter your email" />
    </div>
    <div>
      <label for="password">Password:</label>
      <input id="password" type="password" formControlName="password" placeholder="Enter your password" />
    </div>
    <button type="submit" [disabled]="form.invalid">Login</button>
  </form>
  <div *ngIf="loginError">
    <p style="color: red;">{{ loginError }}</p>
  </div>
</div>
--
.auth-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
  }
  
  .auth-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
    background-color: #004080;
    color: white;
  }
  
  .logo {
    height: 40px;
  }
  
  .right-link span {
    margin-right: 10px;
  }
  
  .right-link a {
    color: #ffd700;
    font-weight: bold;
    text-decoration: none;
  }
  
  .auth-body {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 1;
    background-color: #f4f4f4;
  }
  
  .login-box {
    background: white;
    padding: 30px;
    border-radius: 10px;
    width: 350px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    text-align: center;
  }
  
  .login-logo {
    height: 50px;
    margin-bottom: 20px;
  }
  
  .login-box h2 {
    margin-bottom: 20px;
    color: #004080;
  }
  
  input {
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
  }
  
  .password-field {
    position: relative;
  }
  
  .toggle-btn {
    position: absolute;
    right: 10px;
    top: 14px;
    background: none;
    border: none;
    color: #004080;
    cursor: pointer;
  }
  
  .forgot-password {
    margin-top: 10px;
    text-align: right;
  }
  
  .submit-btn {
    margin-top: 20px;
    width: 100%;
    padding: 10px;
    background-color: #004080;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

---
pages/auth/register
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, HttpClientModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  user = {
    email: '',
    password: '',
    username: '',
    gender: '',
    phone: '',
    role: '',
    specialization: '',
    qualification: '',
    place: ''
  };

  constructor(private http: HttpClient, private router: Router) {}

  register(): void {
    if (
      !this.user.email ||
      !this.user.password ||
      !this.user.username ||
      !this.user.gender ||
      !this.user.phone ||
      !this.user.role
    ) {
      alert('Please fill all required fields.');
      return;
    }

    if (
      this.user.role === 'Doctor' &&
      (!this.user.specialization || !this.user.qualification)
    ) {
      alert('Doctor details are required.');
      return;
    }

    if (this.user.role === 'Patient' && !this.user.place) {
      alert('Place is required for patients.');
      return;
    }

    this.http.post('http://localhost:8080/api/auth/register', this.user)
      .subscribe({
        next: () => {
          alert('Registration successful');
          this.router.navigate(['/login']);
        },
        error: () => alert('Registration failed')
      });
  }
}
--
<div class="auth-container">
    <header>
      <div class="logo">YHospitals</div>
      <div class="switch-link">
        Already have an account? <a routerLink="/login">Sign In</a>
      </div>
    </header>
  
    <main>
      <h2>Sign Up for YHospitals</h2>
      <form (ngSubmit)="register()">
        <input [(ngModel)]="user.email" name="email" placeholder="Email" required>
        <input type="password" [(ngModel)]="user.password" name="password" placeholder="Password" required>
        <input [(ngModel)]="user.username" name="username" placeholder="Username" required>
        <input [(ngModel)]="user.gender" name="gender" placeholder="Gender" required>
        <input [(ngModel)]="user.phone" name="phone" placeholder="Phone Number" required>
        
        <label>Role</label>
        <select [(ngModel)]="user.role" name="role" required>
          <option value="">Select Role</option>
          <option value="Doctor">Doctor</option>
          <option value="Patient">Patient</option>
        </select>
        
        <div *ngIf="user.role === 'Doctor'">
          <input [(ngModel)]="user.specialization" name="specialization" placeholder="Specialization" required>
          <input [(ngModel)]="user.qualification" name="qualification" placeholder="Qualification" required>
        </div>
        
        <div *ngIf="user.role === 'Patient'">
          <input [(ngModel)]="user.place" name="place" placeholder="Place" required>
        </div>
        
        <button type="submit">Submit</button>
      </form>
    </main>
  </div>
  --
.auth-container {
    max-width: 400px;
    margin: 60px auto;
    border: 1px solid #ccc;
    padding: 20px;
    border-radius: 8px;
    background: white;
  }
  
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  header .logo {
    font-weight: bold;
    font-size: 1.2rem;
  }
  
  .switch-link a {
    color: #007bff;
    text-decoration: none;
  }
  
  form {
    display: flex;
    flex-direction: column;
  }
  
  input, select {
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
  }
  
  button[type="submit"] {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
  }
  ----
pages/book-appointment
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AppointmentService, AppointmentRequestDTO, BookingResult } from '../../services/appointment.service';
import { DoctorService } from '../../services/doctor.service';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-book-appointment',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './book-appointment.component.html',
  styleUrls: ['./book-appointment.component.css']
})
export class BookAppointmentComponent implements OnInit {
  form!: FormGroup;
  doctors: any[] = [];
  slots: string[] = [];
  bookingResult?: BookingResult;
  bookingError?: string;

  // Make authService public so it is accessible in the template.
  constructor(
    private fb: FormBuilder,
    private appointmentService: AppointmentService,
    private doctorService: DoctorService,
    public authService: AuthService
  ) {}

  ngOnInit(): void {
    if (this.authService.getUserRole() !== 'patient') {
      console.error('Only patients can book appointments.');
      return;
    }

    // Initialize the reactive form.
    this.form = this.fb.group({
      doctorId: ['', Validators.required],
      date: ['', Validators.required],
      time: ['', Validators.required]
    });

    // Load the list of doctors.
    this.loadDoctors();

    // Auto-load available slots when the doctor or date changes.
    this.form.get('doctorId')?.valueChanges.subscribe(() => this.loadSlots());
    this.form.get('date')?.valueChanges.subscribe(() => this.loadSlots());
  }

  loadDoctors(): void {
    this.doctorService.getAllDoctors().subscribe({
      next: (data: any[]) => this.doctors = data,
      error: (err: any) => console.error('Error loading doctors', err)
    });
  }

  loadSlots(): void {
    const doctorId = this.form.get('doctorId')?.value;
    const date = this.form.get('date')?.value;
    if (doctorId && date) {
      this.appointmentService.getAvailableSlots(doctorId, date).subscribe({
        next: (data: string[]) => this.slots = data,
        error: (err: any) => console.error('Error loading slots', err)
      });
    }
  }

  onSubmit(): void {
    if (this.form.valid) {
      const patientId = this.authService.getPatientId();
      if (patientId === null) {
        console.error('Patient ID is missing. Please login again.');
        this.bookingError = 'Patient ID is missing.';
        return;
      }
      const request: AppointmentRequestDTO = {
        ...this.form.value,
        patientId: patientId
      };
      this.appointmentService.bookAppointment(request).subscribe({
        next: (res: BookingResult) => this.bookingResult = res,
        error: (err: any) => {
          console.error('Booking error', err);
          this.bookingError = 'Failed to book appointment.';
        }
      });
    }
  }
}
--
<div class="booking-container" *ngIf="authService.getUserRole() === 'patient'">
    <h2>Book an Appointment</h2>
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
      <!-- Doctor Selection -->
      <div>
        <label for="doctorId">Select Doctor:</label>
        <select formControlName="doctorId" id="doctorId">
          <option value="">--Select a Doctor--</option>
          <option *ngFor="let doctor of doctors" [value]="doctor.id">
            {{ doctor.name }}
          </option>
        </select>
      </div>
  
      <!-- Date Input -->
      <div>
        <label for="date">Date:</label>
        <input id="date" formControlName="date" type="date" />
      </div>
  
      <!-- Time Slot Dropdown -->
      <div>
        <label for="time">Available Time Slots:</label>
        <select formControlName="time" id="time">
          <option value="">--Select a Time Slot--</option>
          <option *ngFor="let slot of slots" [value]="slot">
            {{ slot }}
          </option>
        </select>
      </div>
  
      <button type="submit" [disabled]="form.invalid">Book Appointment</button>
    </form>
  
    <!-- Success / Error Messages -->
    <div *ngIf="bookingResult">
      <p>{{ bookingResult.message }}</p>
    </div>
    <div *ngIf="bookingError">
      <p>{{ bookingError }}</p>
    </div>
  </div>
  --
.booking-container {
    max-width: 500px;
    margin: 30px auto;
    padding: 20px;
    border-radius: 10px;
    background: #f2f2f2;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .form-field {
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
  }
  
  label {
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  input,
  select {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button[type="submit"] {
    margin-top: 15px;
    padding: 10px;
    width: 100%;
    border: none;
    border-radius: 5px;
    background-color: #1976d2;
    color: white;
    font-size: 1rem;
    cursor: pointer;
  }
  
  button[type="submit"]:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  ----
pages/contact
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-contact',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.css']
})
export class ContactComponent {}
--
<div class="contact-container">
    <h2>Contact Us</h2>
    <p>You can reach us via email at contact@yhospitals.com or call us at (123) 456-7890.</p>
    <form>
      <input type="text" placeholder="Your Name" required>
      <input type="email" placeholder="Your Email" required>
      <textarea placeholder="Your Message" rows="4" required></textarea>
      <button type="submit">Send Message</button>
    </form>
  </div>
  --
.contact-container {
    padding: 20px;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .contact-container h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .contact-container p {
    text-align: center;
    margin-bottom: 20px;
  }
  
  form {
    display: flex;
    flex-direction: column;
  }
  
  input, textarea {
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button {
    padding: 10px;
    background-color: #004080;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  ----
pages/dashboard-doctor
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-doctor-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './dashboard-doctor.component.html',
  styleUrls: ['./dashboard-doctor.component.css']
})
export class DoctorDashboardComponent implements OnInit {

  appointments: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchAppointments();
  }

  fetchAppointments(): void {
    this.http.get<any[]>('http://localhost:8080/api/appointments/doctor')
      .subscribe({
        next: (data) => this.appointments = data,
        error: (err) => console.error('Error loading appointments', err)
      });
  }

  updateStatus(id: number, newStatus: string): void {
    this.http.put(`http://localhost:8080/api/appointments/${id}/status`, { status: newStatus })
      .subscribe({
        next: () => {
          // Update the local copy of appointments with the new status
          this.appointments = this.appointments.map(appt => {
            if (appt.id === id) {
              appt.status = newStatus;
            }
            return appt;
          });
        },
        error: () => alert('Status update failed')
      });
  }
}
--
<div class="dashboard-container">
  <h2>Doctor Dashboard</h2>
  <div *ngIf="appointments.length === 0">No appointments scheduled.</div>
  <div *ngFor="let appt of appointments" class="appointment-card">
    <h3>Patient: {{ appt.patientName }}</h3>
    <p><strong>Date:</strong> {{ appt.date }}</p>
    <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
    <p><strong>Status:</strong> {{ appt.status }}</p>
    <button *ngIf="appt.status !== 'Completed'" (click)="updateStatus(appt.id, 'Completed')">
      Mark as Completed
    </button>
    <button *ngIf="appt.status === 'Completed'" (click)="updateStatus(appt.id, 'Pending')">
      Mark as Pending
    </button>
  </div>
</div>
--
.dashboard-container {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.appointment-card {
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 15px;
  background: #f9f9f9;
  margin-bottom: 20px;
}

button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

button:hover {
  opacity: 0.9;
}
----
pages/dashboard-patient
import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-patient-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './dashboard-patient.component.html',
  styleUrls: ['./dashboard-patient.component.css']
})
export class PatientDashboardComponent implements OnInit {
  appointments: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchAppointments();
  }

  fetchAppointments(): void {
    this.http.get<any[]>('http://localhost:8080/api/appointments/patient')
      .subscribe({
        next: (data) => this.appointments = data,
        error: (err) => console.error('Error fetching appointments', err)
      });
  }

  cancelAppointment(id: number): void {
    if (confirm('Are you sure you want to cancel this appointment?')) {
      this.http.delete(`http://localhost:8080/api/appointments/${id}`)
        .subscribe({
          next: () => this.appointments = this.appointments.filter(a => a.id !== id),
          error: () => alert('Failed to cancel appointment')
        });
    }
  }

  updateAppointment(id: number): void {
    alert('Redirecting to update form for appointment ID: ' + id);
  }
}
--
<div class="dashboard-container">
    <h2>Patient Dashboard</h2>
    <div *ngIf="appointments.length === 0">No appointments found.</div>
    <div class="appointment-card" *ngFor="let appt of appointments">
      <h4>Doctor: {{ appt.doctorName }}</h4>
      <p><strong>Date:</strong> {{ appt.date }}</p>
      <p><strong>Time:</strong> {{ appt.timeSlot }}</p>
      <p><strong>Status:</strong> {{ appt.status }}</p>
      <button (click)="updateAppointment(appt.id)">Update</button>
      <button (click)="cancelAppointment(appt.id)" class="cancel">Cancel</button>
    </div>
  </div>
  --
.dashboard-container {
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .dashboard-container h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .appointment-card {
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #ccc;
    background: #fdfdfd;
    margin-bottom: 15px;
  }
  
  .appointment-card button {
    background-color: #007bff;
    color: white;
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 8px;
    margin-right: 8px;
  }
  
  .appointment-card button.cancel {
    background-color: #dc3545;
  }
  
  .appointment-card button:hover {
    opacity: 0.9;
  }
  ---
pages/home
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [RouterModule, CommonModule],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  constructor() {}
}

--
<div class="hero-section">
    <div class="text-box">
      <h1>Book Appointment with Trusted Doctors</h1>
      <p>Simply browse through our extensive list of trusted doctors, schedule your appointment hassle-free.</p>
      <button routerLink="/login">Book Appointment</button>
    </div>
  </div>
  
  <div class="doctors-showcase">
    <img src="/assets/doctor1.png"  class="doctor-pic" />
    <img src="/assets/doctor2.png"  class="doctor-pic" />
    <img src="/assets/doctor3.png"  class="doctor-pic" />
  </div>
  
  --
/* Hero Section with a solid background color */
.hero-section {
    position: relative;
    background-color: #87CEFA; /* Changed background color to light sky blue */
    height: 80vh;
    display: flex;
    align-items: center;
    padding-left: 50px;
  }
  
  /* Remove the overlay if no image is used, or comment it out if not needed */
  /* .hero-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1;
  } */
  
  /* Text box positioned on top of the hero section */
  .text-box {
    position: relative;
    z-index: 2; /* Ensures the text appears above background elements */
    color: white; /* White text for contrast */
    max-width: 500px;
  }
  
  .text-box h1 {
    font-size: 2.5rem;
    margin-bottom: 20px;
  }
  
  .text-box p {
    font-size: 1rem;
    margin-bottom: 20px;
  }
  
  .text-box button {
    background: #004080;
    color: white;
    padding: 10px 20px;
    border: none;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
  }
  
  /* Doctors Showcase Container */
  .doctors-showcase {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin: 30px 0;
  }
  
  /* Doctor Images */
  .doctor-pic {
    border-radius: 50%;
    width: 100px;
    height: 100px;
    object-fit: cover;
  }
  -----
service/appointment.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

// Define DTO interfaces for the appointment workflow.
export interface AppointmentRequestDTO {
  doctorId: number;
  patientId: number;
  date: string;   // In format 'YYYY-MM-DD'
  time: string;   // In format 'HH:MM'
}

export interface BookingResult {
  message: string;
  // other properties if needed
}

export interface AppointmentResponseDTO {
  id: number;
  doctorId: number;
  patientId: number;
  date: string;
  time: string;
  status: string;
}

@Injectable({
  providedIn: 'root'
})
export class AppointmentService {
  // Change the baseUrl if needed to point to your backend.
  private baseUrl = 'http://localhost:8086/Whospitals/profile/appointments';

  constructor(private http: HttpClient) {}

  // Book an appointment using the patient’s request.
  bookAppointment(request: AppointmentRequestDTO): Observable<BookingResult> {
    return this.http.post<BookingResult>(`${this.baseUrl}/book`, request);
  }

  // Get all appointments for the patient by their ID.
  getAppointmentsByPatient(patientId: number): Observable<AppointmentResponseDTO[]> {
    return this.http.get<AppointmentResponseDTO[]>(`${this.baseUrl}/patient/${patientId}`);
  }

  // (Optional) Method to get available slots if your backend supports returning only slots.
  // In our example backend, the /availability endpoint expects a GET with a body.
  getAvailableSlots(doctorId: number, date: string): Observable<string[]> {
    const requestBody = { doctorId, date };
    return this.http.request<string[]>('GET', `${this.baseUrl}/availability`, { body: requestBody });
  }
}
----
service/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export type UserRole = 'patient' | 'doctor';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private TOKEN_KEY = 'authToken';
  private ROLE_KEY = 'userRole';
  private PATIENT_ID_KEY = 'patientId';
  // Make sure this URL matches your backend login endpoint.
  private loginUrl = 'http://localhost:8082/Whospitals/auth/login';

  constructor(private http: HttpClient) {}

  // The login method returns an observable with token, role, and optionally patientId.
  login(credentials: { email: string; password: string; }): Observable<{ token: string; role: UserRole; patientId?: number }> {
    return this.http.post<{ token: string; role: UserRole; patientId?: number }>(this.loginUrl, credentials);
  }

  // Saves token, role, and patientId (if provided) in localStorage.
  saveToken(token: string, role: UserRole, patientId?: number): void {
    localStorage.setItem(this.TOKEN_KEY, token);
    localStorage.setItem(this.ROLE_KEY, role);
    if (patientId !== undefined) {
      localStorage.setItem(this.PATIENT_ID_KEY, patientId.toString());
    }
  }

  getToken(): string | null {
    return localStorage.getItem(this.TOKEN_KEY);
  }

  getUserRole(): UserRole | null {
    return localStorage.getItem(this.ROLE_KEY) as UserRole | null;
  }

  // Retrieves the patient ID if available.
  getPatientId(): number | null {
    const patientId = localStorage.getItem(this.PATIENT_ID_KEY);
    return patientId ? +patientId : null;
  }

  // Optionally extracts the user's email from the token payload.
  getUserEmail(): string | null {
    const token = this.getToken();
    if (!token) return null;
    const payload = token.split('.')[1];
    try {
      const decoded = JSON.parse(atob(payload));
      return decoded.email || null;
    } catch {
      return null;
    }
  }

  logout(): void {
    localStorage.removeItem(this.TOKEN_KEY);
    localStorage.removeItem(this.ROLE_KEY);
    localStorage.removeItem(this.PATIENT_ID_KEY);
  }

  isLoggedIn(): boolean {
    return !!this.getToken();
  }
}
----
service/doctor.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DoctorService {
  private baseUrl = 'http://localhost:8086/Whospitals';

  constructor(private http: HttpClient, private auth: AuthService) {}

  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      Authorization: `Bearer ${this.auth.getToken()}`
    });
  }

  getAllDoctors(): Observable<any[]> {
    return this.http.get<any[]>(this.baseUrl);
  }

  getDoctorAppointments(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/appointments`, { headers: this.getHeaders() });
  }
}
----
service/patient.service.ts
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class PatientService {
  constructor() {}
}
----
app/shared/footer
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  standalone: true,
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.css']
})
export class FooterComponent {}

--
<footer class="footer">
    <p>&copy; 2025 WHospitals. All rights reserved.</p>
  </footer>
  --
.footer {
    text-align: center;
    padding: 16px;
    background: #f2f2f2;
    margin-top: 40px;
  }
  
